import fontforge

# Ugly way to get the arguments.
[
    ufo_file,
    ec_font_gf, ec_font_tfm,
    tc_font_gf, tc_font_tfm,
    euro_font_gf, euro_font_tfm
] = sys.argv[1:]

# This was generated by gen-ec-mapping.py.
EC_NAME_UNICODE = [('grave', 0x60),('acute', 0xB4),('circumflex', 0x2C6),('tilde', 0x2DC),('dieresis', 0xA8),('hungarumlaut', 0x2DD),('ring', 0x2DA),('caron', 0x2C7),('breve', 0x2D8),('macron', 0xAF),('dotaccent', 0x2D9),('cedilla', 0xB8),('ogonek', 0x2DB),('quotesinglbase', 0x201A),('guilsinglleft', 0x2039),('guilsinglright', 0x203A),('quotedblleft', 0x201C),('quotedblright', 0x201D),('quotedblbase', 0x201E),('guillemotleft', 0xAB),('guillemotright', 0xBB),('endash', 0x2013),('emdash', 0x2014),('cwm', 0x200B),('perthousandzero', -1),('dotlessi', 0x131),('dotlessj', 0x237),('ff', 0xFB00),('fi', 0xFB01),('fl', 0xFB02),('ffi', 0xFB03),('ffl', 0xFB04),('visiblespace', 0x2423),('exclam', 0x21),('quotedbl', 0x22),('numbersign', 0x23),('dollar', 0x24),('percent', 0x25),('ampersand', 0x26),('quoteright', 0x2019),('parenleft', 0x28),('parenright', 0x29),('asterisk', 0x2A),('plus', 0x2B),('comma', 0x2C),('hyphen', 0x2D),('period', 0x2E),('slash', 0x2F),('zero', 0x30),('one', 0x31),('two', 0x32),('three', 0x33),('four', 0x34),('five', 0x35),('six', 0x36),('seven', 0x37),('eight', 0x38),('nine', 0x39),('colon', 0x3A),('semicolon', 0x3B),('less', 0x3C),('equal', 0x3D),('greater', 0x3E),('question', 0x3F),('at', 0x40),('A', 0x41),('B', 0x42),('C', 0x43),('D', 0x44),('E', 0x45),('F', 0x46),('G', 0x47),('H', 0x48),('I', 0x49),('J', 0x4A),('K', 0x4B),('L', 0x4C),('M', 0x4D),('N', 0x4E),('O', 0x4F),('P', 0x50),('Q', 0x51),('R', 0x52),('S', 0x53),('T', 0x54),('U', 0x55),('V', 0x56),('W', 0x57),('X', 0x58),('Y', 0x59),('Z', 0x5A),('bracketleft', 0x5B),('backslash', 0x5C),('bracketright', 0x5D),('asciicircum', 0x5E),('underscore', 0x5F),('quoteleft', 0x2018),('a', 0x61),('b', 0x62),('c', 0x63),('d', 0x64),('e', 0x65),('f', 0x66),('g', 0x67),('h', 0x68),('i', 0x69),('j', 0x6A),('k', 0x6B),('l', 0x6C),('m', 0x6D),('n', 0x6E),('o', 0x6F),('p', 0x70),('q', 0x71),('r', 0x72),('s', 0x73),('t', 0x74),('u', 0x75),('v', 0x76),('w', 0x77),('x', 0x78),('y', 0x79),('z', 0x7A),('braceleft', 0x7B),('bar', 0x7C),('braceright', 0x7D),('asciitilde', 0x7E),('hyphen.char', -1),('Abreve', 0x102),('Aogonek', 0x104),('Cacute', 0x106),('Ccaron', 0x10C),('Dcaron', 0x10E),('Ecaron', 0x11A),('Eogonek', 0x118),('Gbreve', 0x11E),('Lacute', 0x139),('Lcaron', 0x13D),('Lslash', 0x141),('Nacute', 0x143),('Ncaron', 0x147),('Eng', 0x14A),('Ohungarumlaut', 0x150),('Racute', 0x154),('Rcaron', 0x158),('Sacute', 0x15A),('Scaron', 0x160),('Scedilla', 0x15E),('Tcaron', 0x164),('Tcedilla', 0x162),('Uhungarumlaut', 0x170),('Uring', 0x16E),('Ydieresis', 0x178),('Zacute', 0x179),('Zcaron', 0x17D),('Zdotaccent', 0x17B),('IJ', 0x132),('Idotaccent', 0x130),('dcroat', 0x111),('section', 0xA7),('abreve', 0x103),('aogonek', 0x105),('cacute', 0x107),('ccaron', 0x10D),('dcaron', 0x10F),('ecaron', 0x11B),('eogonek', 0x119),('gbreve', 0x11F),('lacute', 0x13A),('lcaron', 0x13E),('lslash', 0x142),('nacute', 0x144),('ncaron', 0x148),('eng', 0x14B),('ohungarumlaut', 0x151),('racute', 0x155),('rcaron', 0x159),('sacute', 0x15B),('scaron', 0x161),('scedilla', 0x15F),('tcaron', 0x165),('tcedilla', 0x163),('uhungarumlaut', 0x171),('uring', 0x16F),('ydieresis', 0xFF),('zacute', 0x17A),('zcaron', 0x17E),('zdotaccent', 0x17C),('ij', 0x133),('exclamdown', 0xA1),('questiondown', 0xBF),('sterling', 0xA3),('Agrave', 0xC0),('Aacute', 0xC1),('Acircumflex', 0xC2),('Atilde', 0xC3),('Adieresis', 0xC4),('Aring', 0xC5),('AE', 0xC6),('Ccedilla', 0xC7),('Egrave', 0xC8),('Eacute', 0xC9),('Ecircumflex', 0xCA),('Edieresis', 0xCB),('Igrave', 0xCC),('Iacute', 0xCD),('Icircumflex', 0xCE),('Idieresis', 0xCF),('Eth', 0xD0),('Ntilde', 0xD1),('Ograve', 0xD2),('Oacute', 0xD3),('Ocircumflex', 0xD4),('Otilde', 0xD5),('Odieresis', 0xD6),('OE', 0x152),('Oslash', 0xD8),('Ugrave', 0xD9),('Uacute', 0xDA),('Ucircumflex', 0xDB),('Udieresis', 0xDC),('Yacute', 0xDD),('Thorn', 0xDE),('Germandbls', 0x1E9E),('agrave', 0xE0),('aacute', 0xE1),('acircumflex', 0xE2),('atilde', 0xE3),('adieresis', 0xE4),('aring', 0xE5),('ae', 0xE6),('ccedilla', 0xE7),('egrave', 0xE8),('eacute', 0xE9),('ecircumflex', 0xEA),('edieresis', 0xEB),('igrave', 0xEC),('iacute', 0xED),('icircumflex', 0xEE),('idieresis', 0xEF),('eth', 0xF0),('ntilde', 0xF1),('ograve', 0xF2),('oacute', 0xF3),('ocircumflex', 0xF4),('otilde', 0xF5),('odieresis', 0xF6),('oe', 0x153),('oslash', 0xF8),('ugrave', 0xF9),('uacute', 0xFA),('ucircumflex', 0xFB),('udieresis', 0xFC),('yacute', 0xFD),('thorn', 0xFE),('germandbls', 0xDF),]

# This was generated by gen-tc-mapping.py.
TC_NAME_UNICODE = [('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('arrowleft', 0x2190),('arrowright', 0x2192),('uni0361.alt', -1),('uni0361', 0x361),('uni2040.alt', -1),('uni2040', 0x2040),('.notdef', -1),('.notdef', -1),('uni2422', 0x2422),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('quotesingle', 0x27),('.notdef', -1),('.notdef', -1),('asteriskmath', 0x2217),('.notdef', -1),('.notdef', -1),('uniFE66', 0xFE66),('.notdef', -1),('fraction', 0x2044),('zerooldstyle', -1),('oneoldstyle', -1),('twooldstyle', -1),('threeoldstyle', -1),('fouroldstyle', -1),('fiveoldstyle', -1),('sixoldstyle', -1),('sevenoldstyle', -1),('eightoldstyle', -1),('nineoldstyle', -1),('.notdef', -1),('.notdef', -1),('angleleft', 0x2329),('minus', 0x2212),('angleright', 0x232A),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('uni2127', 0x2127),('.notdef', -1),('circle', 0x25CB),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('uni2126', 0x2126),('.notdef', -1),('.notdef', -1),('.notdef', -1),('uni301A', 0x301A),('.notdef', -1),('uni301B', 0x301B),('arrowup', 0x2191),('arrowdown', 0x2193),('.notdef', -1),('.notdef', -1),('uni22C6', 0x22C6),('uni26AE', 0x26AE),('uni271D', 0x271D),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('leaf', -1),('uni26AD', 0x26AD),('musicalnote', 0x266A),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('dagger', 0x2020),('daggerdbl', 0x2021),('uni2016', 0x2016),('perthousand', 0x2030),('bullet', 0x2022),('uni2103', 0x2103),('dollaroldstyle', -1),('centoldstyle', -1),('.notdef', -1),('colonmonetary', 0x20A1),('uni20A9', 0x20A9),('uni20A6', 0x20A6),('uni20B2', 0x20B2),('peso', 0x20B1),('lira', 0x20A4),('uni211E', 0x211E),('uni203D', 0x203D),('uni2E18', 0x2E18),('dong', 0x20AB),('trademark', 0x2122),('uni2031', 0x2031),('.notdef', -1),('uni0E3F', 0xE3F),('uni2116', 0x2116),('uni2052', 0x2052),('estimated', 0x212E),('openbullet', 0x25E6),('uni2120', 0x2120),('uni2045', 0x2045),('uni2046', 0x2046),('cent', 0xA2),('.notdef', -1),('currency', 0xA4),('yen', 0xA5),('brokenbar', 0xA6),('.notdef', -1),('.notdef', -1),('copyright', 0xA9),('ordfeminine', 0xAA),('copyleft', 0x1F12F),('logicalnot', 0xAC),('uni2117', 0x2117),('registered', 0xAE),('.notdef', -1),('degree', 0xB0),('plusminus', 0xB1),('twosuperior', 0xB2),('threesuperior', 0xB3),('.notdef', -1),('uni00B5', 0xB5),('paragraph', 0xB6),('periodcentered', 0xB7),('uni203B', 0x203B),('onesuperior', 0xB9),('ordmasculine', 0xBA),('radical', 0x221A),('onequarter', 0xBC),('onehalf', 0xBD),('threequarters', 0xBE),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('multiply', 0xD7),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('divide', 0xF7),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),('.notdef', -1),]

def load(gf_file, tfm_file, name_unicode):
    print("Loading %s: " % gf_file, end='')
    f = fontforge.open(gf_file)
    print("%d glyphs" % sum(1 for _ in f.glyphs()))
    f.mergeFeature(tfm_file)

    # Note that either font.__iterator__ or font.glyphs() will skip
    # .notdef glyphs.
    for i in range(len(f)):
        if i not in f:
            continue
        g = f[i]
        (g.glyphname, g.unicode) = name_unicode[i]

    f.selection.all()
    f.autoTrace()
    return f

def copy_glyph(g, src, dest):
    uni = 'U+%04X' % (g.unicode) if g.unicode != -1 else '-1'
    print("Copying %s (%s) ..." % (uni, g.glyphname))
    src.selection.select(g.glyphname)
    src.copy()
    gg = dest.createChar(g.unicode, g.glyphname)
    dest.selection.select(gg)
    dest.paste()

def copy(src, dest):
    dest_glyph_names = set([g.glyphname for g in dest.glyphs()])
    dest_glyph_unicode = set([g.unicode for g in dest.glyphs()])
    # -1 is special because it indicates that the glpyh doesn't have a
    # -unicode code.
    dest_glyph_unicode.remove(-1)
    for g in src.glyphs():
        if g.glyphname == ".notdef":
            continue
        if g.glyphname in dest_glyph_names:
            print("\tSkip %s" % (g.glyphname))
            continue
        if g.unicode in dest_glyph_unicode:
            print("\tSkip U+%04x (%s)" % (g.unicode, g.glyphname))
            continue

        copy_glyph(g, src, dest)


f = load(ec_font_gf, ec_font_tfm, EC_NAME_UNICODE)

tc = load(tc_font_gf, tc_font_tfm, TC_NAME_UNICODE)
copy(tc, f)

# Add missing glyphs require by GF Latin kernel.
# Reference: https://github.com/googlefonts/glyphsets/blob/main/GF_glyphsets/Latin/txt/nice-names/GF_Latin_Kernel.txt

space = f.createChar(0x20, 'space')
space.width = 500
space.vwidth = 500

nbspace = f.createChar(0xA0, 'uni00A0')
nbspace.width = 500
nbspace.vwidth = 500

# Create "ellipsis" (U+2026) by making a copy of the "period".
period = f['period']
ellipsis = f.createChar(0x2026, 'ellipsis')
ellipsis.addReference('period')
(_, _, xoffset, _) = period.boundingBox()
ellipsis.addReference('period', psMat.translate(xoffset, 0))
ellipsis.addReference('period', psMat.translate(2*xoffset, 0))
ellipsis.width = round(period.width + 2*xoffset)

# EC comes with old Euro. The font has a bunch more glyphs variants.
# Reference: https://ctan.org/pkg/euro-ce
EURO_NAME_UNICODE = (
    [('.notdef', -1)] * 0x45 + [('Euro', 0x20AC)] + [('.notdef', -1)] * 0xBA
)
eurorm = load(euro_font_gf, euro_font_tfm, EURO_NAME_UNICODE)
copy_glyph(eurorm[0x45], eurorm, f)

f.generate(ufo_file)
