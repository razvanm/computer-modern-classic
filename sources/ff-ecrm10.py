import fontforge
import psMat

f = fontforge.font()
f.fontname = 'ecrm10'

# This was generated by gen-ec-mapping.py.
NAME_UNICODE = [('grave', 96),('acute', 180),('circumflex', 710),('tilde', 732),('dieresis', 168),('hungarumlaut', 733),('ring', 730),('caron', 711),('breve', 728),('macron', 175),('dotaccent', 729),('cedilla', 184),('ogonek', 731),('quotesinglbase', 8218),('guilsinglleft', 8249),('guilsinglright', 8250),('quotedblleft', 8220),('quotedblright', 8221),('quotedblbase', 8222),('guillemotleft', 171),('guillemotright', 187),('endash', 8211),('emdash', 8212),('cwm', 8203),('perthousandzero', 0),('dotlessi', 305),('dotlessj', 567),('ff', 64256),('fi', 64257),('fl', 64258),('ffi', 64259),('ffl', 64260),('visiblespace', 9251),('exclam', 33),('quotedbl', 34),('numbersign', 35),('dollar', 36),('percent', 37),('ampersand', 38),('quoteright', 8217),('parenleft', 40),('parenright', 41),('asterisk', 42),('plus', 43),('comma', 44),('hyphen', 45),('period', 46),('slash', 47),('zero', 48),('one', 49),('two', 50),('three', 51),('four', 52),('five', 53),('six', 54),('seven', 55),('eight', 56),('nine', 57),('colon', 58),('semicolon', 59),('less', 60),('equal', 61),('greater', 62),('question', 63),('at', 64),('A', 65),('B', 66),('C', 67),('D', 68),('E', 69),('F', 70),('G', 71),('H', 72),('I', 73),('J', 74),('K', 75),('L', 76),('M', 77),('N', 78),('O', 79),('P', 80),('Q', 81),('R', 82),('S', 83),('T', 84),('U', 85),('V', 86),('W', 87),('X', 88),('Y', 89),('Z', 90),('bracketleft', 91),('backslash', 92),('bracketright', 93),('asciicircum', 94),('underscore', 95),('quoteleft', 8216),('a', 97),('b', 98),('c', 99),('d', 100),('e', 101),('f', 102),('g', 103),('h', 104),('i', 105),('j', 106),('k', 107),('l', 108),('m', 109),('n', 110),('o', 111),('p', 112),('q', 113),('r', 114),('s', 115),('t', 116),('u', 117),('v', 118),('w', 119),('x', 120),('y', 121),('z', 122),('braceleft', 123),('bar', 124),('braceright', 125),('asciitilde', 126),('hyphen', 45),('Abreve', 258),('Aogonek', 260),('Cacute', 262),('Ccaron', 268),('Dcaron', 270),('Ecaron', 282),('Eogonek', 280),('Gbreve', 286),('Lacute', 313),('Lcaron', 317),('Lslash', 321),('Nacute', 323),('Ncaron', 327),('Eng', 330),('Ohungarumlaut', 336),('Racute', 340),('Rcaron', 344),('Sacute', 346),('Scaron', 352),('Scedilla', 350),('Tcaron', 356),('Tcedilla', 354),('Uhungarumlaut', 368),('Uring', 366),('Ydieresis', 376),('Zacute', 377),('Zcaron', 381),('Zdotaccent', 379),('IJ', 306),('Idotaccent', 304),('dcroat', 273),('section', 167),('abreve', 259),('aogonek', 261),('cacute', 263),('ccaron', 269),('dcaron', 271),('ecaron', 283),('eogonek', 281),('gbreve', 287),('lacute', 314),('lcaron', 318),('lslash', 322),('nacute', 324),('ncaron', 328),('eng', 331),('ohungarumlaut', 337),('racute', 341),('rcaron', 345),('sacute', 347),('scaron', 353),('scedilla', 351),('tcaron', 357),('tcedilla', 355),('uhungarumlaut', 369),('uring', 367),('ydieresis', 255),('zacute', 378),('zcaron', 382),('zdotaccent', 380),('ij', 307),('exclamdown', 161),('questiondown', 191),('sterling', 163),('Agrave', 192),('Aacute', 193),('Acircumflex', 194),('Atilde', 195),('Adieresis', 196),('Aring', 197),('AE', 198),('Ccedilla', 199),('Egrave', 200),('Eacute', 201),('Ecircumflex', 202),('Edieresis', 203),('Igrave', 204),('Iacute', 205),('Icircumflex', 206),('Idieresis', 207),('Eth', 208),('Ntilde', 209),('Ograve', 210),('Oacute', 211),('Ocircumflex', 212),('Otilde', 213),('Odieresis', 214),('OE', 338),('Oslash', 216),('Ugrave', 217),('Uacute', 218),('Ucircumflex', 219),('Udieresis', 220),('Yacute', 221),('Thorn', 222),('Germandbls', 7838),('agrave', 224),('aacute', 225),('acircumflex', 226),('atilde', 227),('adieresis', 228),('aring', 229),('ae', 230),('ccedilla', 231),('egrave', 232),('eacute', 233),('ecircumflex', 234),('edieresis', 235),('igrave', 236),('iacute', 237),('icircumflex', 238),('idieresis', 239),('eth', 240),('ntilde', 241),('ograve', 242),('oacute', 243),('ocircumflex', 244),('otilde', 245),('odieresis', 246),('oe', 339),('oslash', 248),('ugrave', 249),('uacute', 250),('ucircumflex', 251),('udieresis', 252),('yacute', 253),('thorn', 254),('germandbls', 223),]

# How much we need to scale the pixels to get to points.
scale = 1000/(9600/72.27*10)

# Hacky way to get the widths for all the glyphs. These comes from the
# .tfm for the font.
widths = {}
with open('testfont/ecrm10.pl') as pl:
    for line in pl:
        parts = line.split()
        if len(parts) < 1:
            continue
        if parts[0] == '(CHARACTER':
            char_index = int(line.split(' ')[2], base=8)
        elif parts[0] == '(CHARWD':
            widths[char_index] = 1000*float(parts[2].rstrip(')'))

for i in range(len(NAME_UNICODE)):
    (name, uni) = NAME_UNICODE[i]
    c = f.createChar(uni, name)
    print('0x%02x %s U+%04X ' % (i, name, uni), end='')
    c.importOutlines('testfont/ecrm10/char-%02x.svg' % (i), scale=False)
    c.transform(psMat.scale(scale))

    # Move the glyph to a know position in preparation for moving it
    # to the right position.
    (x1, y1, x2, y2) = c.boundingBox()
    c.transform(psMat.translate(-x1, -y1))

    with open('testfont/ecrm10/char-%02x.size' % (i)) as s:
        parts = s.read().split()
        [dimx, dimy] = [int(i) for i in parts[1].rstrip(',').split('x')]
        [offsetx, offsety] = [int(i) for i in parts[3].strip('()').split(',')]
        c.transform(psMat.translate(-offsetx*scale, (offsety-dimy+1)*scale))

    # We need to do this last because we use c.transform before this
    # and that will alter the width.
    c.width = int(widths[i]/scale)
    print('width: %d' % (c.width))

f.generate('ecrm10.ufo')
